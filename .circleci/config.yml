# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
commands:
  print_pipeline_id:
    steps:
      - run: echo ${CIRCLE_WORKFLOW_ID}
jobs:
  test_reusable_code:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - print_pipeline_id
  save_hello_world_output:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: circleci/node:13.8.0
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Save hello"
          command: echo "Hello" > ~/output.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - output.txt          
  print_world:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: echo world
  print_env_var:
    docker:
      - image: cimg/base:2020.01
    steps: 
      - checkout
      - run:
         name: "echo an env var that is part of our project"
         command: |
          echo $MY_TEST_ENV
  print_workspace_txt:
    docker:
    - image: circleci/node:13.8.0
    steps:
      - attach_workspace:
          at: ~/
      - run: cat ~/output.txt

  my_job:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: exit 1
      - run:
          name: on error
          command: echo "Hello Error!"
          when: on_fail

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  say-hello-workflow:
    jobs:
      - test_reusable_code
      - save_hello_world_output
      - print_world:
          requires:
            - save_hello_world_output
      - print_workspace_txt:
          requires:
            - save_hello_world_output  
      - my_job     

      
